---
import { Footer } from "@/components/ui/footer";
import type { FooterProps } from "@/components/ui/footer";
// Lucide-react icons are no longer directly used here, Footer handles them.

// Props for the main layout, like 'title'
export interface Props {
	title: string;
	pageTitle?: string;
	pageDescription?: string;
	pageOgType?: string;
	pageImage?: string;
	pageUrl?: string;
}
const {
	title,
	pageTitle = "Pinsky Studio | Where Algorithms Meet Artistry",
	pageDescription = "Pinsky Studio is the creative practice of Bregy Malpartida, a multidisciplinary artist and technologist based in Peru. Specializing in the intersection of algorithms and traditional art, the studio creates unique works that combine custom plotter technology with hand-painted techniques.",
	pageOgType = "website",
	pageImage = "https://pinsky.studio/assets/img/og-image.png",
	pageUrl = "https://pinsky.studio/",
} = Astro.props;

const siteName = "Pinsky Studio";
const twitterHandle = "@pinskystudio";

// Icon constants are removed.

// Define props for the Footer, explicitly typed
const footerProps: FooterProps = {
	showPinskyLogo: true,
	brandName: "Pinsky Studio",
	socialLinks: [
		{
			iconName: "Twitter", // Changed from icon: twitterIconElement
			href: "https://x.com/pinsky_three",
			label: "Twitter / X",
		},
		{
			iconName: "Instagram", // Changed from icon: instagramIconElement
			href: "https://www.instagram.com/pinsky_three",
			label: "Instagram",
		},
		{
			iconName: "Linkedin", // Changed from icon: linkedinIconElement
			href: "https://www.linkedin.com/in/bregy/",
			label: "LinkedIn",
		},
	],
	mainLinks: [
		{ href: "/", label: "Home" },
		{ href: "/shop", label: "Shop" },
		{ href: "/portfolio", label: "Portfolio" },
		{ href: "/patreon", label: "Patreon" },
		{ href: "/commissions", label: "Commissions" },
		{ href: "/workshops", label: "Workshops" },
		{ href: "/contact", label: "Contact" },
	],
	legalLinks: [
		{ href: "/privacy", label: "Privacy Policy" },
		// { href: "/terms", label: "Terms of Service" }, // Add if/when terms page is created
	],
	copyright: {
		text: "Â© " + new Date().getFullYear() + " Pinsky Studio.",
		license: "All rights reserved.",
	},
};
---
<!doctype html>
<html lang="en" class="dark">
	<head>
		<!-- Required Meta Tags Always Come First -->
		<meta charset="utf-8" />
		<meta
			name="robots"
			content="max-snippet:-1, max-image-preview:large, max-video-preview:-1"
		/>
		<link rel="canonical" href={pageUrl} />
		<meta
			name="viewport"
			content="width=device-width, initial-scale=1, shrink-to-fit=no"
		/>
		<meta name="description" content={pageDescription} />

		<!-- Twitter Card Tags -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:site" content={twitterHandle} />
		<meta name="twitter:creator" content={twitterHandle} />
		<meta name="twitter:title" content={pageTitle} />
		<meta name="twitter:description" content={pageDescription} />
		<meta name="twitter:image" content={pageImage} />
		{/* You might want to add twitter:image:alt here if you have alt text for images */}

		<!-- Open Graph Tags (for Facebook, WhatsApp, Telegram, LinkedIn, etc.) -->
		<meta property="og:url" content={pageUrl} />
		<meta property="og:locale" content="en_US" />
		<meta property="og:type" content={pageOgType} />
		<meta property="og:site_name" content={siteName} />
		<meta property="og:title" content={pageTitle} />
		<meta property="og:description" content={pageDescription} />
		<meta property="og:image" content={pageImage} />
		{/* Recommended: Add image dimensions for better rendering speed */}
		{/* <meta property="og:image:width" content="1200" /> */}
		{/* <meta property="og:image:height" content="630" /> */}
		{/* You might want to add og:image:alt here if you have alt text for images */}

		<!-- Title -->
		<title>{title}</title>

		<!-- Favicon -->
		<link rel="shortcut icon" href="/favicon.ico" />

		<!-- Font -->
		<link
			href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap"
			rel="stylesheet"
		/>

		<!-- Theme Check and Update -->
		<script>
			const html = document.querySelector("html");
			const isLightOrAuto =
				localStorage.getItem("hs_theme") === "light" ||
				(localStorage.getItem("hs_theme") === "auto" &&
					!window.matchMedia("(prefers-color-scheme: dark)").matches);
			const isDarkOrAuto =
				localStorage.getItem("hs_theme") === "dark" ||
				(localStorage.getItem("hs_theme") === "auto" &&
					window.matchMedia("(prefers-color-scheme: dark)").matches);

			// if (isLightOrAuto && html.classList.contains("dark"))
			// 	html.classList.remove("dark");
			// else if (isDarkOrAuto && html.classList.contains("light"))
			// 	html.classList.remove("light");
			// else if (isDarkOrAuto && !html.classList.contains("dark"))
			// 	html.classList.add("dark");
			// else if (isLightOrAuto && !html.classList.contains("light"))
			// 	html.classList.add("light");
		</script>

		<!-- CSS Preline -->
		<link
			rel="stylesheet"
			href="https://preline.co/assets/css/main.min.css"
		/>

		<style>
			/* Theme Switcher Styles */
			.theme-switcher {
				display: none;
			}

			/* Theme-specific styles */
			:root[data-theme="light"] {
				color-scheme: light;
			}

			:root[data-theme="dark"] {
				color-scheme: dark;
			}

			@keyframes theme-fade {
				from {
					opacity: 0;
				}
				to {
					opacity: 1;
				}
			}

			/* Theme transition effects */
			.dark svg,
			.light svg {
				animation: theme-fade 0.3s ease;
			}

			/* Header styles for both themes */
			.header-main {
				position: fixed;
				width: 100%;
				top: 0;
				z-index: 50;
				transition: all 0.3s ease;
			}

			/* Dark theme header styles */
			.dark .header-main {
				background: rgba(23, 23, 23, 0.3);
				backdrop-filter: blur(10px);
				border-bottom: 1px solid rgba(255, 255, 255, 0.1);
			}

			/* Light theme header styles */
			.light .header-main {
				background: rgba(255, 255, 255, 0.3);
				backdrop-filter: blur(10px);
				border-bottom: 1px solid rgba(0, 0, 0, 0.1);
				box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
			}

			/* Logo styles */
			.logo-text {
				color: rgb(17, 24, 39);
				transition: color 0.3s ease;
			}

			.dark .logo-text {
				color: rgb(255, 255, 255);
			}

			/* Navigation links */
			.nav-link {
				color: rgba(17, 24, 39, 0.8);
				transition: color 0.3s ease;
			}

			.nav-link:hover {
				color: rgba(17, 24, 39, 1);
			}

			.dark .nav-link {
				color: rgba(255, 255, 255, 0.8);
			}

			.dark .nav-link:hover {
				color: rgba(255, 255, 255, 1);
			}

			/* Contact button */
			.contact-button {
				background: linear-gradient(135deg, #6366f1, #3b82f6);
				color: white;
				transition: all 0.3s ease;
			}

			.contact-button:hover {
				background: linear-gradient(135deg, #4f46e5, #2563eb);
				transform: translateY(-1px);
			}

			/* Logo background in dark mode */
			.dark .logo-bg {
				background-color: rgb(23, 23, 23);
			}

			/* Mobile menu */
			.mobile-menu {
				background: rgba(255, 255, 255, 0.95);
				border-top: 1px solid rgba(0, 0, 0, 0.1);
			}

			.dark .mobile-menu {
				background: rgba(23, 23, 23, 0.95);
				border-top: 1px solid rgba(255, 255, 255, 0.1);
			}

			@keyframes gradient {
				0% {
					background-position: 0% 50%;
				}
				50% {
					background-position: 100% 50%;
				}
				100% {
					background-position: 0% 50%;
				}
			}
			.animate-gradient {
				background-size: 200% auto;
				animation: gradient 8s ease infinite;
			}

			.hero-pattern {
				background-image: radial-gradient(
					circle at 1px 1px,
					rgba(99, 102, 241, 0.15) 1px,
					transparent 0
				);
				background-size: 24px 24px;
			}

			.hero-glass {
				backdrop-filter: blur(8px);
				background: rgba(17, 24, 39, 0.7);
				border: 1px solid rgba(255, 255, 255, 0.1);
			}

			.dark .hero-glass {
				background: rgba(17, 24, 39, 0.7);
			}

			.light .hero-glass {
				background: rgba(255, 255, 255, 0.8);
			}
		</style>
	</head>

	<body class="dark:bg-neutral-900">
		<!-- ========== HEADER ========== -->
		<header class="header-main">
			<div class="max-w-[85rem] mx-auto px-4 sm:px-6 lg:px-8">
				<div class="flex items-center justify-between h-16">
					<!-- Logo -->
					<a
						href="/"
						class="flex items-center space-x-2"
					>
						<img
							src="/pinsky_logo_black.svg"
							alt="Pinsky Studio"
							class="h-6 w-auto dark:hidden"
						/>
						<img
							src="/pinsky_logo_white.svg"
							alt="Pinsky Studio"
							class="h-6 w-auto hidden dark:block"
						/>
					</a>

					<!-- Navigation -->
					<nav class="hidden md:flex items-center gap-x-6">
						<a
							href="/"
							class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>
							Home
						</a>
						<a
							href="/shop"
							class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>
							Shop
						</a>
						<!-- Portfolio Dropdown -->
						<div class="relative">
							<button
								type="button"
								class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white flex items-center gap-x-1"
								aria-expanded="false"
								aria-controls="portfolio-dropdown"
								id="portfolio-dropdown-toggle"
							>
								Portfolio
								<svg
									class="w-4 h-4 transition-transform duration-200"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M19 9l-7 7-7-7"></path>
								</svg>
							</button>
							<div
								id="portfolio-dropdown"
								class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-neutral-900 ring-1 ring-black ring-opacity-5 hidden transition-all duration-200 z-50"
							>
								<div class="py-1">
									<a
										href="/portfolio/originals"
										class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-neutral-300 dark:hover:bg-neutral-800"
										>Original Works</a
									>
									<a
										href="/portfolio/combinatoria-del-caos"
										class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-neutral-300 dark:hover:bg-neutral-800"
										>Combinatoria del Caos</a
									>
									<a
										href="/portfolio/topologias-del-cuerpo"
										class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-neutral-300 dark:hover:bg-neutral-800"
										>TopologÃ­as del Cuerpo</a
									>
									<a
										href="/portfolio/equivalencias-invisibles"
										class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-neutral-300 dark:hover:bg-neutral-800"
										>Equivalencias Invisibles</a
									>
									<a
										href="/portfolio/transformaciones-silenciosas"
										class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 dark:text-neutral-300 dark:hover:bg-neutral-800"
										>Transformaciones Silenciosas</a
									>
								</div>
							</div>
						</div>
						<a
							href="/patreon"
							class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>
							Patreon
						</a>
						<a
							href="/commissions"
							class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>
							Commissions
						</a>
						<a
							href="/workshops"
							class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>
							Workshops
						</a>
						<a
							href="/contact"
							class="text-sm text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300"
						>
							Contact
						</a>
					</nav>

					<!-- Mobile Menu Button -->
					<button
						type="button"
						class="md:hidden inline-flex items-center justify-center size-10 text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						data-hs-collapse="#navbar-collapse"
					>
						<span class="sr-only">Toggle menu</span>
						<svg
							class="w-5 h-5"
							fill="none"
							viewBox="0 0 24 24"
							stroke="currentColor"
						>
							<path
								class="hs-collapse-open:hidden"
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="1.5"
								d="M4 6h16M4 12h16M4 18h16"></path>
							<path
								class="hidden hs-collapse-open:block"
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="1.5"
								d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
			</div>

			<!-- Mobile Menu -->
			<div
				id="navbar-collapse"
				class="hidden md:hidden absolute top-full left-0 right-0 bg-white dark:bg-neutral-900 border-t border-gray-200 dark:border-neutral-800"
			>
				<nav class="flex flex-col p-4 gap-y-3">
					<a
						href="/"
						class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>Home</a
					>
					<a
						href="/shop"
						class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>Shop</a
					>
					
					<!-- Mobile Portfolio Submenu -->
					<div class="space-y-2">
						<button
							type="button"
							class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white flex items-center justify-between w-full"
							data-hs-collapse="#portfolio-submenu"
						>
							Portfolio
							<svg
								class="w-4 h-4 hs-collapse-open:rotate-180 transition-transform duration-200"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M19 9l-7 7-7-7"></path>
							</svg>
						</button>
						<div
							id="portfolio-submenu"
							class="hs-collapse hidden pl-4 space-y-2"
						>
							<a
								href="/portfolio/originals"
								class="block text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
								>Original Works</a
							>
							<a
								href="/portfolio/combinatoria-del-caos"
								class="block text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
								>Combinatoria del Caos</a
							>
							<a
								href="/portfolio/topologias-del-cuerpo"
								class="block text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
								>TopologÃ­as del Cuerpo</a
							>
							<a
								href="/portfolio/equivalencias-invisibles"
								class="block text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
								>Equivalencias Invisibles</a
							>
							<a
								href="/portfolio/transformaciones-silenciosas"
								class="block text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
								>Transformaciones Silenciosas</a
							>
						</div>
					</div>
					
					<a
						href="/patreon"
						class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>Patreon</a
					>
					<a
						href="/commissions"
						class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>Commissions</a
					>
					<a
						href="/workshops"
						class="text-sm text-gray-600 hover:text-gray-800 dark:text-neutral-400 dark:hover:text-white"
						>Workshops</a
					>
					<a
						href="/contact"
						class="text-sm text-indigo-600 hover:text-indigo-700 dark:text-indigo-400 dark:hover:text-indigo-300"
						>Contact</a
					>
				</nav>
			</div>
		</header>

		<!-- ========== MAIN CONTENT ========== -->
		<main id="content" class="pt-16">
			<slot />
		</main>
		<!-- ========== END MAIN CONTENT ========== -->

		<!-- New React Footer -->
		<Footer {...footerProps} client:load></Footer>
		<!-- ========== END FOOTER ========== -->

		<!-- JS PLUGINS -->
		<script src="https://cdn.jsdelivr.net/npm/preline/dist/index.js"
		></script>

		<!-- Initialize Preline -->
		<script>
			document.addEventListener("DOMContentLoaded", () => {
				// Initialize all components
				(window as any).HSStaticMethods.autoInit();

				// Initialize desktop dropdown
				const dropdownToggle = document.getElementById(
					"portfolio-dropdown-toggle",
				);
				const dropdownMenu =
					document.getElementById("portfolio-dropdown");
				const dropdownArrow = dropdownToggle?.querySelector("svg");

				if (dropdownToggle && dropdownMenu && dropdownArrow) {
					// Toggle dropdown on click
					dropdownToggle.addEventListener("click", () => {
						const isOpen =
							dropdownMenu.classList.contains("hidden");
						dropdownMenu.classList.toggle("hidden");
						dropdownArrow.classList.toggle("rotate-180");
						dropdownToggle.setAttribute(
							"aria-expanded",
							isOpen ? "true" : "false",
						);
					});

					// Close dropdown when clicking outside
					document.addEventListener("click", (event) => {
						if (
							!dropdownToggle.contains(event.target as Node) &&
							!dropdownMenu.contains(event.target as Node)
						) {
							dropdownMenu.classList.add("hidden");
							dropdownArrow.classList.remove("rotate-180");
							dropdownToggle.setAttribute(
								"aria-expanded",
								"false",
							);
						}
					});
				}

				// Initialize mobile menu
				const mobileMenuButton = document.querySelector(
					'[data-hs-collapse="#navbar-collapse"]',
				);
				const mobileMenu = document.getElementById("navbar-collapse");
				const mobileMenuIcon = mobileMenuButton?.querySelector("svg");

				if (mobileMenuButton && mobileMenu && mobileMenuIcon) {
					mobileMenuButton.addEventListener("click", () => {
						const isOpen = !mobileMenu.classList.contains("hidden");
						mobileMenu.classList.toggle("hidden");
						mobileMenuButton.setAttribute(
							"aria-expanded",
							(!isOpen).toString(),
						);
						mobileMenuIcon.classList.toggle("hs-collapse-open");
					});
				}

				// Initialize mobile portfolio submenu
				const mobilePortfolioButton = document.querySelector(
					'[data-hs-collapse="#portfolio-submenu"]',
				);
				const mobilePortfolioMenu =
					document.getElementById("portfolio-submenu");
				const mobilePortfolioArrow =
					mobilePortfolioButton?.querySelector("svg");

				if (
					mobilePortfolioButton &&
					mobilePortfolioMenu &&
					mobilePortfolioArrow
				) {
					mobilePortfolioButton.addEventListener("click", () => {
						const isOpen =
							!mobilePortfolioMenu.classList.contains("hidden");
						mobilePortfolioMenu.classList.toggle("hidden");
						mobilePortfolioArrow.style.transform = isOpen
							? "rotate(0deg)"
							: "rotate(180deg)";
					});
				}
			});
		</script>

		<!-- Theme Initialization -->
		<script>
			class ThemeSwitcher {
				private root: HTMLElement;
				private switcher: HTMLElement | null;
				private mediaQuery: MediaQueryList;

				constructor() {
					this.root = document.documentElement;
					this.switcher = document.getElementById("themeSwitcher");
					this.mediaQuery = window.matchMedia(
						"(prefers-color-scheme: dark)",
					);

					// Initialize theme
					this.init();
					this.addEventListeners();
				}

				init(): void {
					// Check for stored preference
					const storedTheme = localStorage.getItem("theme") as
						| "light"
						| "dark"
						| null;

					if (storedTheme) {
						// Use stored preference if it exists
						this.applyTheme(storedTheme);
					} else {
						// Use system preference for first visit
						const systemTheme = this.mediaQuery.matches
							? "dark"
							: "light";
						this.applyTheme(systemTheme);
					}
				}

				addEventListeners(): void {
					// Theme toggle click
					if (this.switcher) {
						this.switcher.addEventListener("click", () =>
							this.toggleTheme(),
						);
					}

					// System theme change - only apply if no stored preference
					this.mediaQuery.addEventListener(
						"change",
						(e: MediaQueryListEvent) => {
							if (!localStorage.getItem("theme")) {
								this.applyTheme(e.matches ? "dark" : "light");
							}
						},
					);
				}

				toggleTheme(): void {
					const currentTheme = this.root.classList.contains("dark")
						? "dark"
						: "light";
					const newTheme = currentTheme === "dark" ? "light" : "dark";

					this.applyTheme(newTheme);
				}

				applyTheme(theme: "light" | "dark"): void {
					// Remove both classes first
					this.root.classList.remove("light", "dark");
					// Add the new theme class
					this.root.classList.add(theme);
					// Store the preference
					localStorage.setItem("theme", theme);
				}
			}

			// Initialize theme switcher when DOM is ready
			document.addEventListener("DOMContentLoaded", () => {
				new ThemeSwitcher();
			});
		</script>
	</body>
</html>
